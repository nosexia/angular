{{age='haha'}}
function addTextInterpolateDirective(){
    // 只是插入age指令
    var interpolateFn = $interpolate(test);
    if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: valueFn(function textInterpolateLinkFn(scope, node) {
            var parent = node.parent(),
                bindings = parent.data('$binding') || [];
            bindings.push(interpolateFn);
            safeAddClass(parent.data('$binding', bindings), 'ng-binding');
            scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
              node[0].nodeValue = value;
            });
          })
    });    
}


// 执行{{name='haha'}}指令
function applyDirectivesToNode(){
    
}


function $interpolate(){
    // exp = name='haha'
    parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
    concat.length = length;
    fn = function(context) {
      try {
        for(var i = 0, ii = length, part; i<ii; i++) {
          if (typeof (part = parts[i]) == 'function') {
            part = part(context);
            if (trustedContext) {
              part = $sce.getTrusted(trustedContext, part);
            } else {
              part = $sce.valueOf(part);
            }
            if (part === null || isUndefined(part)) {
              part = '';
            } else if (typeof part != 'string') {
              part = toJson(part);
            }
          }
          concat[i] = part;
        }
        return concat.join('');
      }
      catch(err) {
        var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
            err.toString());
        $exceptionHandler(newErr);
      }
    };
    fn.exp = text;
    fn.parts = parts;
    return fn;
}


var $parseOptions = {
    csp: false,
    unwrapPromises: false,
    logPromiseWarnings: true
};

function $parse($filter){
    // lexer.options = $parseOptions
    var lexer = new Lexer($parseOptions);

    var parser = new Parser(lexer, $filter, $parseOptions);
    parsedExpression = parser.parse(exp, false);
    return parsedExpression;
}

var Lexer = function (options) {
  this.options = options;
};


var Parser = function (lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
};

Parser.prototype = {
    prase : function(text, json){
        this.text = text;
        this.json = json;
        // 此时的tokens有三个
        this.tokens = this.lexer.lex(text);
        // value = token.fn
        var value = json ? this.primary() : this.statements();
        value.literal = false;
        value.constant = false;
        return value;
    },
    statements : function(){
        statements.push(this.filterChain());
    },

    filterChain : function(){
        var left = this.expression();
        return left;
    }，

    expression : function(){
        var left = this.ternary();
        if ((token = this.expect('='))) {
          if (!left.assign) {
            this.throwError('implies assignment but [' +
                this.text.substring(0, token.index) + '] can not be assigned to', token);
          }
          right = this.ternary();
          return function(scope, locals) {
            return left.assign(scope, right(scope, locals), locals);
          };
        }
        return left;
    }

}


// 最终执行结果
var key0 = age;
var left = simpleGetterFn1(scope, locals) {
    if (scope == null) return undefined;
    return ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
  };

var right = function() { return string; }

var value = function(scope, locals) {
            return left.assign(scope, right(scope, locals), locals);
          };


value.assign = function(self, value){
    // ident = age;
    // ident = 'age', value ='haha'
    return setter(self, ident, value, parser.text, parser.options);
} 



Lexer.prototype = {
    lex : function(text){
        this.text = text;
        this.index = 0;
        this.ch = this.text.charAt(this.index);
        if(为单双引号的情况){
            this.readString();
        }
        if(第一个字母是标识符){
            this.readIdent();
        }else{
            // ch为等号的情况
            this.tokens.push({
                index: this.index,      //3
                text: this.ch,          //'='
                fn: fn,     空函数
                json: (this.was('[,:') && this.is('+-'))  //false
            });
        }
        return this.tokens;
    },

    readIdent : function(){
        // 当this.index满足angular自己定义标识符的条件时，
        // 字符满足数组，或者标识符，或者数字, ch累加到变量ident,否则break
        while (this.index < this.text.length) {
          ch = this.text.charAt(this.index);
          if (ch === '.' || this.isIdent(ch) || this.isNumber(ch)) {
            ident += ch;
          } else {
            break;
          }
          this.index++;
        }
        var token = {
          index: start,
          text: ident
        };
        var getter = getterFn(ident, this.options, this.text);
        token.fn = extend(function(self, locals) {
            return (getter(self, locals));
        }, {
            assign: function(self, value) {
              return setter(self, ident, value, parser.text, parser.options);
            }
        });
        // 最终结果
        token = {
            index : start,
            text : ident,
            fn = function(self, locals) {
                return (getter(self, locals));
            }
        }
        token.fn.assign = function(self, value) {
          return setter(self, ident, value, parser.text, parser.options);
        }
        this.tokens.push(token);
    },
    readString : function(quote){
        检查到引号，读字符串
        var string = '';
        var rawString = quote;
        this.ch = this.text.charAt(this.index);
        rawString += this.ch;
        if(字符串){
            string +=ch
        }else if(ch为单引号是){
            this.index++;
            this.tokens.push({
              index: start,
              text: rawString,
              string: string,
              json: true,
              fn: function() { return string; }
            });
        }
    }

}

var key0 = 'age'
var getter = function simpleGetterFn1(scope, locals) {
    if (scope == null) return undefined;
    return ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
  };



//io的操作步骤
function addTextInterpolateDirective(){
    var interpolateFn = $interpolate(text, true);
}

funtion $interpolate(exp){
    parts.push(fn = $parse(text));
    var fn = function(){

    }
    fn.exp = exp
    fn.parts = parts;
    return fn;
}

var $parseOptions = {
    cps : cps,
    unwrapPromise : false
}

function $parse(){
    var lexer = new Lexer($parseOptions)
    var parser = new Parser(lexer, $filter, $parseOptions);
    parseExpress = parser.parse(text, false);
}

function Lexer(options){
    this.options = options
}

Lexer.prototype = {
    lex : function(){
        // 生成各种token, token上有fn方法;        
    }
}

function Parser(lexer, $filter, options){
    this.lexer = lexer;
    this.$filter = this.$filter;
    this.options = options
}

Parser.prototype = {
    parse : function(text){
        // 获取各种this.tokens
        this.tokens = this.lexer.lex(text);
        // value的形式就是去token.fn,当token.text为标识符的情况 
        // 如果存在赋值操纵此时的value值，在statements()的返回值。
        var value = json ? this.primary() : this.statements();
        return value;
    }
}