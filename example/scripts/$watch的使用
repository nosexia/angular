

scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
  node[0].nodeValue = value;
});

var fn = function(context) {
          try {
            for(var i = 0, ii = length, part; i<ii; i++) {
              if (typeof (part = parts[i]) == 'function') {
                part = part(context);
                if (trustedContext) {
                  part = $sce.getTrusted(trustedContext, part);
                } else {
                  part = $sce.valueOf(part);
                }
                if (part === null || isUndefined(part)) {
                  part = '';
                } else if (typeof part != 'string') {
                  part = toJson(part);
                }
              }
              concat[i] = part;
            }
            return concat.join('');
          }
          catch(err) {
            var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
                err.toString());
            $exceptionHandler(newErr);
          }
        };
        fn.exp = text;
        fn.parts = parts;
interpolateFn = fn



// body对于的控制器上,$$watchers数组上面有一个需要监听的watcher
if (!array) {
  array = scope.$$watchers = [];
}
array.unshift(watcher);



$digest的执行



    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this['this'] = this.$root =  this;
      this.$$destroyed = false;
      this.$$asyncQueue = [];
      this.$$postDigestQueue = [];
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$isolateBindings = {};
    }

    

  $watch: function(watchExp, listener, objectEquality) {
    var scope = this,
        get = compileToFn(watchExp, 'watch'),

        array = scope.$$watchers,
        watcher = {
          fn: listener,
          last: initWatchVal,
          get: get,
          exp: watchExp,
          eq: !!objectEquality
        };
    lastDirtyWatch = null;

    // in the case user pass string, we need to compile it, do we really need this ?
    if (!isFunction(listener)) {
      var listenFn = compileToFn(listener || noop, 'listener');
      watcher.fn = function(newVal, oldVal, scope) {listenFn(scope);};
    }

    if (typeof watchExp == 'string' && get.constant) {
      var originalFn = watcher.fn;
      watcher.fn = function(newVal, oldVal, scope) {
        originalFn.call(this, newVal, oldVal, scope);
        arrayRemove(array, watcher);
      };
    }

    if (!array) {
      array = scope.$$watchers = [];
    }
    // we use unshift since we use a while loop in $digest for speed.
    // the while loop reads in reverse order.
    array.unshift(watcher);
    return function() {
      arrayRemove(array, watcher);
      lastDirtyWatch = null;
    };
  },